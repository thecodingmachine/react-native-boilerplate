"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7320],{7984:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>a});var o=t(4848),i=t(8453);const s={slug:"/components/skeleton",sidebar_label:"Skeleton",title:"Skeleton",id:"skeleton",keywords:["skeleton","loading","animation"]},l=void 0,r={id:"Guides/Components/skeleton",title:"Skeleton",description:"The atomic Skeleton component is a helper component that allows you to display a loading animation while the content is loading. This component is particularly useful when you need to display a loading animation while the content is loading by presenting a placeholder UI of all the components to the user.",source:"@site/docs/04-Guides/08 - Components/03 - Skeleton.md",sourceDirName:"04-Guides/08 - Components",slug:"/components/skeleton",permalink:"/react-native-boilerplate/docs/components/skeleton",draft:!1,unlisted:!1,editUrl:"https://github.com/thecodingmachine/react-native-boilerplate/edit/main/website-documentation/docs/docs/04-Guides/08 - Components/03 - Skeleton.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/components/skeleton",sidebar_label:"Skeleton",title:"Skeleton",id:"skeleton",keywords:["skeleton","loading","animation"]},sidebar:"tutorialSidebar",previous:{title:"IconByVariant",permalink:"/react-native-boilerplate/docs/components/icon-by-variant"},next:{title:"DefaultError",permalink:"/react-native-boilerplate/docs/components/default-error"}},d={},a=[{value:"Usage",id:"usage",level:3},{value:"Props",id:"props",level:3}];function c(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["The atomic ",(0,o.jsx)(n.code,{children:"Skeleton"})," component is a helper component that allows you to display a loading animation while the content is loading. This component is particularly useful when you need to display a loading animation while the content is loading by presenting a placeholder UI of all the components to the user."]}),"\n",(0,o.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import { AssetByVariant, IconByVariant, Skeleton } from '@/components/atoms';\n\nfunction Example() {\n  const fetchOneUserQuery = useFetchOneQuery(currentId); // fetchOneUserQuery is a react-query query\n\n  return (\n    <Skeleton\n      loading={fetchOneUserQuery.isLoading}\n    >\n      <Text>{user.name}</Text>\n    </Skeleton>\n  );\n}\n\nexport default Example;\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["So the user name will be displayed when the ",(0,o.jsx)(n.code,{children:"fetchOneUserQuery"})," is not loading, otherwise, the ",(0,o.jsx)(n.code,{children:"Skeleton"})," component will display a loading animation."]}),"\n",(0,o.jsx)(n.h3,{id:"props",children:"Props"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Name"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"loading"}),(0,o.jsx)(n.td,{children:"boolean"}),(0,o.jsx)(n.td,{}),(0,o.jsx)(n.td,{children:"The required boolean value to determine whether the content is loading or not."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"children"}),(0,o.jsx)(n.td,{children:"ReactNode"}),(0,o.jsx)(n.td,{}),(0,o.jsx)(n.td,{children:"The required children to be displayed."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"height"}),(0,o.jsx)(n.td,{children:"DimensionValue"}),(0,o.jsx)(n.td,{children:"24"}),(0,o.jsx)(n.td,{children:"The duration of the loading animation in milliseconds."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"width"}),(0,o.jsx)(n.td,{children:"DimensionValue"}),(0,o.jsx)(n.td,{children:"'100%'"}),(0,o.jsx)(n.td,{children:"The duration of the loading animation in milliseconds."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"...props"}),(0,o.jsx)(n.td,{children:"ViewProps"}),(0,o.jsx)(n.td,{}),(0,o.jsxs)(n.td,{children:["all props from ",(0,o.jsx)(n.code,{children:"View"})," component are supported."]})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var o=t(6540);const i={},s=o.createContext(i);function l(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);