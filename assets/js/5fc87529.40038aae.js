"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6140],{5943:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var t=n(4848),o=n(8453);const s={slug:"/components/safe-screen",sidebar_label:"SafeScreen",title:"SafeScreen",id:"safe-screen",keywords:["SafeScreen","StatusBar","SafeAreaView","ErrorBoundary","DefaultError"]},a=void 0,c={id:"Guides/Components/safe-screen",title:"SafeScreen",description:"The template SafeScreen component is a helper component that allows you to display a screen with a safe area view, a status bar, and a fallback UI when an error occurs in the application. This component is particularly useful when you need to display a screen with all necessary tools to handle errors in your app.",source:"@site/docs/04-Guides/08 - Components/06 - SafeScreen.md",sourceDirName:"04-Guides/08 - Components",slug:"/components/safe-screen",permalink:"/react-native-boilerplate/docs/components/safe-screen",draft:!1,unlisted:!1,editUrl:"https://github.com/thecodingmachine/react-native-boilerplate/edit/main/website-documentation/docs/docs/04-Guides/08 - Components/06 - SafeScreen.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{slug:"/components/safe-screen",sidebar_label:"SafeScreen",title:"SafeScreen",id:"safe-screen",keywords:["SafeScreen","StatusBar","SafeAreaView","ErrorBoundary","DefaultError"]},sidebar:"tutorialSidebar",previous:{title:"ErrorBoundary",permalink:"/react-native-boilerplate/docs/components/error-boundary"},next:{title:"Beta build",permalink:"/react-native-boilerplate/docs/BetaBuild"}},i={},l=[{value:"Usage",id:"usage",level:3},{value:"Props",id:"props",level:3}];function d(e){const r={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["The template ",(0,t.jsx)(r.code,{children:"SafeScreen"})," component is a helper component that allows you to display a screen with a safe area view, a status bar, and a fallback UI when an error occurs in the application. This component is particularly useful when you need to display a screen with all necessary tools to handle errors in your app."]}),"\n",(0,t.jsx)(r.h3,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-jsx",children:"import { useI18n, useUser } from '@/hooks';\n\nimport { SafeScreen } from '@/components/templates';\n\nfunction Example() {\n  const { useFetchOneQuery } = useUser();\n\n  const fetchOneUserQuery = useFetchOneQuery(1);\n\n  return (\n    <SafeScreen\n      isError={fetchOneUserQuery.isError} // boolean value to determine whether an error occurred or not if true the fallback UI will be displayed\n      onResetError={fetchOneUserQuery.refetch} // function to reset the error state and re-execute the query\n    >\n      // your content here\n    </SafeScreen>\n  );\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["So if an error occurs in the ",(0,t.jsx)(r.code,{children:"fetchOneUserQuery"}),", the ",(0,t.jsx)(r.code,{children:"SafeScreen"})," component will display the ",(0,t.jsxs)(r.a,{href:"/docs/components/default-error",children:[(0,t.jsx)(r.code,{children:"DefaultError"})," component"]})," with a button to reset the error. It also display the same error for any other error in the screen thanks to the ",(0,t.jsx)(r.a,{href:"/docs/components/error-boundary",children:"error boundary system"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"props",children:"Props"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Name"}),(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Default"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"isError"}),(0,t.jsx)(r.td,{children:"boolean"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:"boolean value to determine whether an error occurred or not."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"onResetError"}),(0,t.jsx)(r.td,{children:"function"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:"function called on default error button press"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"...props"}),(0,t.jsx)(r.td,{children:"Omit<SafeAreaViewProps, 'mode'>"}),(0,t.jsx)(r.td,{}),(0,t.jsxs)(r.td,{children:["all props from ",(0,t.jsx)(r.code,{children:"View"})," component are supported."]})]})]})]})]})}function h(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>c});var t=n(6540);const o={},s=t.createContext(o);function a(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);