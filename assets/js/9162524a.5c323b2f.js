"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5181],{2407:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=n(4848),i=n(8453);const r={slug:"/debugging",sidebar_label:"Debugging",title:"Debugging",id:"debugging",keywords:["debugging","reactotron"]},a=void 0,s={id:"Guides/debugging",title:"Debugging",description:"Found a bug in your app? It can be difficult to identify, especially if you're unsure whether it's related to the network or not.",source:"@site/docs/04-Guides/07-Debugging.md",sourceDirName:"04-Guides",slug:"/debugging",permalink:"/react-native-boilerplate/docs/debugging",draft:!1,unlisted:!1,editUrl:"https://github.com/thecodingmachine/react-native-boilerplate/edit/main/website-documentation/docs/docs/04-Guides/07-Debugging.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{slug:"/debugging",sidebar_label:"Debugging",title:"Debugging",id:"debugging",keywords:["debugging","reactotron"]},sidebar:"tutorialSidebar",previous:{title:"Storage",permalink:"/react-native-boilerplate/docs/storage"},next:{title:"Beta build",permalink:"/react-native-boilerplate/docs/BetaBuild"}},u={},c=[{value:"Setup",id:"setup",level:3},{value:"Going Further",id:"going-further",level:3}];function g(e){const t={a:"a",admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Found a bug in your app? It can be difficult to identify, especially if you're unsure whether it's related to the network or not.\nIn our boilerplate, we've seamlessly integrated ",(0,o.jsx)(t.a,{href:"https://github.com/infinitered/reactotron",children:"Reactotron"}),", a powerful desktop app for inspecting React Native projects.\nReactotron is invaluable during development, offering an easy way to view your application's logs, async storage, network calls, and state."]}),"\n",(0,o.jsx)(t.h3,{id:"setup",children:"Setup"}),"\n",(0,o.jsx)(t.p,{children:"By default, the boilerplate comes with Reactotron already configured, saving you time and effort.\nHowever, if you ever need to fine-tune your Reactotron settings to better suit your\nproject's requirements, rest assured that it's a breeze to do so."}),"\n",(0,o.jsxs)(t.p,{children:["Simply navigate to the ",(0,o.jsx)(t.code,{children:"./ReactotronConfig.js"})," file, where you'll find\nthe Reactotron configuration. By default, we've set it up to use the configuration suitable for development environment, ensuring a smooth and hassle-free experience from the get-go."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import Reactotron from 'reactotron-react-native';\nimport mmkvPlugin from 'reactotron-react-native-mmkv';\nimport {\n  QueryClientManager,\n  reactotronReactQuery,\n} from 'reactotron-react-query';\n\nimport { storage, queryClient } from './src/App';\nimport config from './app.json';\n\nconst queryClientManager = new QueryClientManager({\n  queryClient,\n});\n\n// highlight-next-line\n// You can change the storage configuration here\nReactotron.configure({\n  name: config.name,\n  onDisconnect: () => {\n    queryClientManager.unsubscribe();\n  },\n})\n  .useReactNative()\n  // highlight-next-line\n  .use(mmkvPlugin({ storage })) // We use the mmkv plugin to store the Reactotron state\n  // highlight-next-line\n  .use(reactotronReactQuery(queryClientManager)) // We use the react-query plugin to store the Reactotron state\n  .connect();\n"})}),"\n",(0,o.jsx)(t.h3,{id:"going-further",children:"Going Further"}),"\n",(0,o.jsxs)(t.p,{children:["For a deeper dive into the world of debugging with\n",(0,o.jsx)(t.a,{href:"https://github.com/infinitered/reactotron",children:"Reactotron"}),",\nwe invite you to explore its comprehensive documentation.\nThere, you'll find valuable insights and detailed guidance on harnessing the full potential\nof this tool to enhance your app's debugging process."]}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsx)(t.p,{children:"We use Reactotron while the official React-Native Debugger is not stable. We recommend using Reactotron for debugging purposes."})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var o=n(6540);const i={},r=o.createContext(i);function a(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);