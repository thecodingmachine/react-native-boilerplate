"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3518],{2876:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>h});var a=n(4848),i=n(8453);const r={slug:"/data-fetching",sidebar_label:"Data Fetching",title:"Data Fetching",id:"data-fetching",keywords:["data fetching","react query","tanstack query","react-query","tanstack-query"]},s=void 0,c={id:"Guides/data-fetching",title:"Data Fetching",description:"Indeed, in the realm of React Native and React development, there are several valuable libraries that can significantly",source:"@site/docs/04-Guides/02-Data Fetching.md",sourceDirName:"04-Guides",slug:"/data-fetching",permalink:"/react-native-boilerplate/docs/data-fetching",draft:!1,unlisted:!1,editUrl:"https://github.com/thecodingmachine/react-native-boilerplate/edit/main/website-documentation/docs/docs/04-Guides/02-Data Fetching.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/data-fetching",sidebar_label:"Data Fetching",title:"Data Fetching",id:"data-fetching",keywords:["data fetching","react query","tanstack query","react-query","tanstack-query"]},sidebar:"tutorialSidebar",previous:{title:"Navigate",permalink:"/react-native-boilerplate/docs/navigate"},next:{title:"I18n",permalink:"/react-native-boilerplate/docs/internationalization"}},o={},h=[{value:"Fetching Data at Startup",id:"fetching-data-at-startup",level:2},{value:"Advanced usage",id:"advanced-usage",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Indeed, in the realm of React Native and React development, there are several valuable libraries that can significantly\nsimplify data management tasks. One such library is TanStack Query, which has gained popularity for its ability to streamline\ndata fetching, caching, error handling, and more. It's an excellent choice for integrating into this boilerplate, as it can\ngreatly enhance the efficiency and reliability of data management in your application."}),"\n",(0,a.jsx)(t.h2,{id:"fetching-data-at-startup",children:"Fetching Data at Startup"}),"\n",(0,a.jsxs)(t.p,{children:["This boilerplate offers a convenient method for fetching data before presenting the application content to the user.\nThis capability is made possible through the ",(0,a.jsx)(t.a,{href:"/docs/navigate#navigation-structure",children:"navigation structure"})," of the initial\nsetup and the inclusion of the ",(0,a.jsx)(t.code,{children:"Startup"})," screen."]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"Startup"})," screen takes on the role of being the very first screen shown to the user upon launching the application.\nIt serves as the entry point where essential data can be fetched and prepared before the user interacts with the app's content.\nThis ensures a smoother and more responsive user experience."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:'title="src/screens/Startup/Startup.tsx"',children:"  // highlight-next-line\nimport { useQuery } from '@tanstack/react-query';\n\nconst Startup = ({ navigation }: ApplicationScreenProps) => {\n    const { layout, gutters, fonts } = useTheme();\n    const { t } = useTranslation();\n\n    // highlight-start\n    const { isSuccess, isFetching, isError } = useQuery({\n        queryKey: ['startup'],\n        queryFn: () => {\n            // Fetch data here\n            return Promise.resolve(true);\n        },\n    });\n    // highlight-end\n\n    useEffect(() => {\n        navigation.reset({\n            index: 0,\n            routes: [{ name: 'Main' }],\n        });\n    }, [isSuccess]);\n\n    return (\n        //...\n    );\n};\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"useQuery"})," hook is employed for data fetching. Now, let's explore how to formulate the request."]}),"\n",(0,a.jsx)(t.p,{children:"Consider a scenario where we wish to retrieve application settings from an API before the user accesses the application's content.\nTo achieve this, we will create a service responsible for fetching this data."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import { instance } from '@/services/instance';\n\nexport default async () => instance.get(`/settings`);\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"instance"})," is an http client instance that comes pre-configured in the boilerplate."]}),"\n",(0,a.jsxs)(t.p,{children:["Next, we will use the ",(0,a.jsx)(t.code,{children:"fetchSettings"})," service within the ",(0,a.jsx)(t.code,{children:"Startup"})," screen."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:'title="src/screens/Startup/Startup.tsx"',children:"import { useQuery } from '@tanstack/react-query';\n// highlight-next-line\nimport fetchSettings from '@/folder/fetchSettings';\n\nconst Startup = ({ navigation }: ApplicationScreenProps) => {\n    const { layout, gutters, fonts } = useTheme();\n    const { t } = useTranslation(['startup']);\n\n    const { isSuccess, isFetching, isError } = useQuery({\n        queryKey: ['startup'],\n        // highlight-next-line\n        queryFn: fetchSettings,\n    });\n\n    useEffect(() => {\n        navigation.reset({\n            index: 0,\n            routes: [{ name: 'Main' }],\n        });\n    }, [isSuccess]);\n\n    return (\n        //...\n    );\n};\n"})}),"\n",(0,a.jsx)(t.h2,{id:"advanced-usage",children:"Advanced usage"}),"\n",(0,a.jsxs)(t.p,{children:["Since we've utilized no additional or custom configuration, for further information,\nyou should refer to the official documentation of the ",(0,a.jsx)(t.a,{href:"https://react-query.tanstack.com/",children:"library"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var a=n(6540);const i={},r=a.createContext(i);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);